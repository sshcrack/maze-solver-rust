use std::{sync::{Arc, RwLock}, fs::File, io::Write};

use eframe::{App, Theme};
use egui::*;
use generators::generate::generate;
use manager::{MazeThread, Window};
use solve::solve::SolveAlgorithm;
use tools::consts::MazeOptions;

use crate::tools::consts::setup_constants;

mod generators;
mod manager;
mod point;
mod solve;
mod tools;

fn main() -> anyhow::Result<()> {
    let mut out = "iteration;val\n".to_string();
    let mut old = 0;
    for i in (2..100).step_by(2) {
        setup_constants(MazeOptions { speed: 1.0, size: i, seed: 0, show_animation: false });
        let window = Window::new(&Context::default(), &Arc::new(RwLock::new(0)), &Arc::new(RwLock::new(Vec::new())), &Arc::new(RwLock::new(false)));
        let maze = generate(&window)?;

        print!("{},", maze.0 - old);
        out += &format!("{};{}\n", i, maze.0);
        old = maze.0;
    }


    let mut file = File::create("out.csv")?;
    file.write_all(out.as_bytes());
    Ok(())
}